import streamlit as st
import requests
import json
import io
from datetime import datetime

# --- C·∫•u h√¨nh trang Streamlit ---
st.set_page_config(
    page_title="C√¥ng C·ª• ƒê·ªÅ Xu·∫•t Vi·ªác L√†m CV",
    page_icon="üìÑ",
    layout="wide", # S·ª≠ d·ª•ng layout r·ªông h∆°n
    initial_sidebar_state="collapsed"
)

# --- Th√™m Custom CSS ƒë·ªÉ ch·ªânh m√†u s·∫Øc, font, v√† hi·ªáu ·ª©ng ---
st.markdown("""
<style>
    /* T·ªïng th·ªÉ ·ª©ng d·ª•ng */
    .stApp {
        background-color: #F8F4E3; /* M√†u v√†ng be l√†m n·ªÅn ch√≠nh */
        color: #1A1A1A; /* M√†u ch·ªØ ƒëen ƒë·∫≠m */
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* Ti√™u ƒë·ªÅ ch√≠nh */
    h1 {
        color: #1A1A1A;
        font-size: 2.8em;
        font-weight: 800;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
    }
    h2, h3, h4, h5, h6 {
        color: #1A1A1A;
        font-weight: 700;
    }
    p {
        color: #333333;
        line-height: 1.8;
        font-size: 1.1em;
    }

    /* N√∫t ch√≠nh (T·∫£i file, T√¨m ki·∫øm) */
    .stButton > button {
        background-color: #FFD700; /* V√†ng t∆∞∆°i cho n√∫t */
        color: #333333; /* Ch·ªØ ƒëen */
        border-radius: 10px;
        font-weight: bold;
        padding: 12px 30px;
        border: 2px solid #CCA300; /* Vi·ªÅn v√†ng ƒë·∫≠m */
        box-shadow: 0 4px 10px rgba(255, 215, 0, 0.4);
        transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
    }
    .stButton > button:hover {
        background-color: #FFC400; /* V√†ng ƒë·∫≠m h∆°n khi hover */
        transform: translateY(-3px);
        box-shadow: 0 6px 15px rgba(255, 215, 0, 0.6);
    }

    /* File uploader button */
    .stFileUploader > div > button {
        background-color: #32CD32; /* Xanh l√° c√¢y t∆∞∆°i */
        color: white;
        border-radius: 10px;
        padding: 12px 30px;
        border: 2px solid #228B22; /* Vi·ªÅn xanh l√° ƒë·∫≠m */
        box-shadow: 0 4px 10px rgba(50, 205, 50, 0.4);
        transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
    }
    .stFileUploader > div > button:hover {
        background-color: #2E8B57; /* Xanh ƒë·∫≠m h∆°n khi hover */
        transform: translateY(-3px);
        box-shadow: 0 6px 15px rgba(50, 205, 50, 0.6);
    }

    /* ƒêi·ªÅu ch·ªânh c√°c expander (job cards) */
    .stExpander {
        margin-bottom: 20px; /* Kho·∫£ng c√°ch gi·ªØa c√°c expander */
        border-radius: 12px;
        overflow: hidden; /* ƒê·∫£m b·∫£o bo g√≥c ƒë·∫πp */
        box-shadow: 0 4px 15px rgba(0,0,0,0.1); /* ƒê·ªï b√≥ng nh·∫π cho c·∫£ card */
        border: 2px solid #FFD700; /* Th√™m vi·ªÅn v√†ng cho m·ªói expander */
    }

    /* Header c·ªßa expander (ph·∫ßn c√≥ th·ªÉ click ƒë·ªÉ m·ªü/ƒë√≥ng) */
    .stExpander > div[data-testid="stExpanderToggle"] {
        color: #1A1A1A !important;
        font-size: 1.1em; /* TƒÉng k√≠ch th∆∞·ªõc ch·ªØ trong ti√™u ƒë·ªÅ expander */
        font-weight: bold;
        border-radius: 10px 10px 0 0; /* Bo g√≥c tr√™n, kh√¥ng bo g√≥c d∆∞·ªõi */
        padding: 1rem 1.2rem;
        box-shadow: 0 4px 10px rgba(0,0,0,0.08);
        transition: background-color 0.3s ease, box-shadow 0.2s ease, transform 0.2s ease;
    }
    /* Hover state cho header expander */
    .stExpander > div[data-testid="stExpanderToggle"]:hover {
        background-color: #D0D0D0; /* X√°m nh·∫°t h∆°n khi hover */
        box-shadow: 0px 8px 20px rgba(0,0,0,0.15);
        transform: translateY(-3px);
    }

    /* Hi·ªáu ·ª©ng xen k·∫Ω m√†u cho header expander */
    div.stExpander:nth-of-type(odd) > div[data-testid="stExpanderToggle"] {
        background-color: #F8F8F8; /* M√†u n·ªÅn nh·∫°t h∆°n cho h√†ng l·∫ª */
    }
    div.stExpander:nth-of-type(even) > div[data-testid="stExpanderToggle"] {
        background-color: #EFEFEF; /* M√†u n·ªÅn ƒë·∫≠m h∆°n cho h√†ng ch·∫µn */
    }

    /* CSS cho Job Title L·ªöN V√Ä C√ì M√ÄU B√äN TRONG N·ªòI DUNG EXPANDER */
    .job-title-content {
        color: #007BFF; /* Xanh n∆∞·ªõc bi·ªÉn t∆∞∆°i */
        font-size: 1.8em; /* To h∆°n ƒë·ªÉ d·ªÖ ƒë·ªçc */
        font-weight: 800; /* R·∫•t ƒë·∫≠m */
        text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
        margin-bottom: 20px; /* Kho·∫£ng c√°ch v·ªõi c√°c th√¥ng tin kh√°c */
        border-bottom: 2px solid #ADD8E6; /* K·∫ª d∆∞·ªõi job title */
        padding-bottom: 10px;
    }

    /* N·ªôi dung c·ªßa expander - T·∫°o hi·ªáu ·ª©ng k·∫ª b·∫£ng nh·∫π */
    .stExpander > div[data-testid="stExpanderContent"] {
        background-color: #FFFFFF; /* N·ªÅn tr·∫Øng cho n·ªôi dung */
        border: 1px solid #E0E0E0; /* Gi·ªØ l·∫°i border nh·∫π cho n·ªôi dung */
        border-top: none; /* B·ªè border tr√™n v√¨ ƒë√£ c√≥ vi·ªÅn c·ªßa expander */
        border-radius: 0 0 12px 12px; /* Bo g√≥c d∆∞·ªõi */
        padding: 1.5rem;
        margin-top: 0; /* ƒê·∫£m b·∫£o kh√¥ng c√≥ kho·∫£ng c√°ch √¢m */
        box-shadow: 0px 2px 5px rgba(0,0,0,0.05);
    }
    .stExpander > div[data-testid="stExpanderContent"] p {
        margin-bottom: 8px; /* Kho·∫£ng c√°ch gi·ªØa c√°c d√≤ng th√¥ng tin */
        font-size: 1.05em;
        color: #4A4A4A;
        padding: 5px 0; /* Padding nh·∫π cho m·ªói d√≤ng */
        border-bottom: 1px dashed #F0F0F0; /* ƒê∆∞·ªùng k·∫ª m·ªù gi·ªØa c√°c d√≤ng */
    }
    .stExpander > div[data-testid="stExpanderContent"] p:last-of-type {
        border-bottom: none; /* B·ªè k·∫ª ·ªü d√≤ng cu·ªëi c√πng */
    }
    .stExpander > div[data-testid="stExpanderContent"] strong {
        color: #1A1A1A;
        min-width: 120px; /* ƒê·∫£m b·∫£o c√°c nh√£n th·∫≥ng h√†ng */
        display: inline-block; /* ƒê·ªÉ min-width c√≥ t√°c d·ª•ng */
    }
    .stExpander > div[data-testid="stExpanderContent"] a {
        color: #007BFF;
        text-decoration: none;
        font-weight: bold;
        transition: color 0.2s ease;
    }
    .stExpander > div[data-testid="stExpanderContent"] a:hover {
        color: #0056b3;
        text-decoration: underline;
    }

    /* M√†u cho ƒëi·ªÉm ph√π h·ª£p (score) */
    .similarity-score-display {
        color: #28A745; /* M√†u xanh l√° c√¢y ƒë·∫≠m */
        font-weight: bold;
        font-size: 1.1em;
        padding-left: 5px;
    }
    /* ƒêi·ªÅu ch·ªânh p ch·ª©a ƒëi·ªÉm ph√π h·ª£p ƒë·ªÉ n√≥ n·ªïi b·∫≠t h∆°n */
    .stExpander > div[data-testid="stExpanderContent"] p.score-line {
        background-color: #E6FFE6; /* N·ªÅn xanh l√° nh·∫°t cho d√≤ng ƒëi·ªÉm */
        border-radius: 5px;
        padding: 10px 15px;
        margin-top: 15px;
        border: 1px solid #C8E6C9;
        font-weight: bold;
    }


    /* Custom CSS cho thanh cu·ªôn (scrollbar) */
    ::-webkit-scrollbar {
        width: 8px;
    }
    ::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 10px;
    }
    ::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 10px;
    }
    ::-webkit-scrollbar-thumb:hover {
        background: #555;
    }

</style>
""", unsafe_allow_html=True)


# --- URL c·ªßa API Hugging Face Space c·ªßa b·∫°n ---
API_BASE_URL = 'https://unglong-api-recommender-job.hf.space'
API_RECOMMEND_ENDPOINT = f"{API_BASE_URL}/recommend_jobs/"

# --- L·∫•y Access Token t·ª´ Streamlit Secrets ---
try:
    HF_ACCESS_TOKEN = st.secrets["HF_ACCESS_TOKEN"]
    headers = {"Authorization": f"Bearer {HF_ACCESS_TOKEN}"}
except KeyError:
    st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Hugging Face Access Token. Vui l√≤ng th√™m 'HF_ACCESS_TOKEN' v√†o file .streamlit/secrets.toml ho·∫∑c v√†o Space secrets.")
    st.stop()

# --- ·∫¢nh ƒë·∫°i di·ªán ---
CAT_IMAGE_URL = "https://i.pinimg.com/736x/a5/84/1b/a5841b2cf13fd7592fff39b912204fd0.jpg"

# --- Ti√™u ƒë·ªÅ v√† gi·ªõi thi·ªáu ---
col1, col2 = st.columns([0.1, 0.9])
with col1:
    st.image(CAT_IMAGE_URL, width=100)
with col2:
    st.title("C√¥ng C·ª• ƒê·ªÅ Xu·∫•t Vi·ªác L√†m t·ª´ CV c·ªßa B·∫°n")

st.markdown("""
Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi c√¥ng c·ª• ƒë·ªÅ xu·∫•t vi·ªác l√†m th√¥ng minh! Vui l√≤ng t·∫£i l√™n CV c·ªßa b·∫°n (ƒë·ªãnh d·∫°ng PDF) ƒë·ªÉ ch√∫ng t√¥i ph√¢n t√≠ch v√† ƒë·ªÅ xu·∫•t c√°c v·ªã tr√≠ c√¥ng vi·ªác ph√π h·ª£p nh·∫•t.
""")

# --- Khu v·ª±c t·∫£i file ---
uploaded_file = st.file_uploader(
    "Ch·ªçn CV c·ªßa b·∫°n (ƒë·ªãnh d·∫°ng PDF)",
    type="pdf",
    help="Ch·ªâ ch·∫•p nh·∫≠n file PDF. K√≠ch th∆∞·ªõc t·ªëi ƒëa ƒë∆∞·ª£c khuy·∫øn ngh·ªã: 5MB."
)

# --- N√∫t t√¨m ki·∫øm ---
if st.button("üîç T√¨m ki·∫øm Vi·ªác l√†m", use_container_width=True):
    if uploaded_file is not None:
        if uploaded_file.type == "application/pdf":
            with st.spinner("ƒêang ph√¢n t√≠ch CV v√† t√¨m ki·∫øm vi·ªác l√†m... Vui l√≤ng ch·ªù trong gi√¢y l√°t."):
                files = {'file': (uploaded_file.name, uploaded_file.getvalue(), 'application/pdf')}

                try:
                    response = requests.post(API_RECOMMEND_ENDPOINT, files=files, headers=headers, timeout=120)

                    if response.status_code == 200:
                        data = response.json()

                        if data and "error" in data:
                            st.error(f"‚ùå R·∫•t ti·∫øc, ƒë√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω CV c·ªßa b·∫°n: {data['error']}. "
                                     "Ch√∫ng t√¥i ƒëang c·ªë g·∫Øng kh·∫Øc ph·ª•c s·ª± c·ªë n√†y. Mong b·∫°n th√¥ng c·∫£m v√† th·ª≠ l·∫°i sau √≠t ph√∫t nh√©.")
                        elif not isinstance(data, list) or len(data) == 0:
                            st.warning("Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác ph√π h·ª£p n√†o cho CV c·ªßa b·∫°n. "
                                       "B·∫°n c√≥ th·ªÉ th·ª≠ t·∫£i l√™n m·ªôt CV kh√°c ho·∫∑c ƒëi·ªÅu ch·ªânh n·ªôi dung CV ƒë·ªÉ c√≥ k·∫øt qu·∫£ t·ªët h∆°n nh√©.")
                        else:
                            st.success("üéâ ƒê√£ t√¨m th·∫•y c√°c c√¥ng vi·ªác ph√π h·ª£p! C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i.")

                            # --- Hi·ªÉn th·ªã Top 10 c√¥ng vi·ªác (kh√¥ng c√≤n khung tr·∫Øng bao ngo√†i) ---
                            st.subheader("Top 10 c√¥ng vi·ªác ƒë·ªÅ xu·∫•t:")

                            # S·ª≠ d·ª•ng st.container ƒë·ªÉ c√≥ thanh cu·ªôn n·∫øu n·ªôi dung d√†i
                            with st.container(height=700): # B·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh chi·ªÅu cao
                                for i, job in enumerate(data[:10]):
                                    job_title_display = job.get('job_title', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')
                                    similarity_score_display = job.get('similarity_score', 0.0)
                                    
                                    # Chuy·ªÉn ƒë·ªïi timestamp deadline
                                    deadline_timestamp = job.get('deadline')
                                    deadline_display = "N/A"
                                    if deadline_timestamp:
                                        try:
                                            # Chuy·ªÉn ƒë·ªïi t·ª´ mili gi√¢y sang gi√¢y r·ªìi sang datetime
                                            dt_object = datetime.fromtimestamp(deadline_timestamp / 1000)
                                            deadline_display = dt_object.strftime("%d/%m/%Y")
                                        except Exception:
                                            deadline_display = "Kh√¥ng x√°c ƒë·ªãnh"

                                    # Chuy·ªÉn ƒë·ªïi timestamp date_crawl_module_1
                                    date_crawl_timestamp = job.get('date_crawl_module_1')
                                    date_crawl_display = "N/A"
                                    if date_crawl_timestamp:
                                        try:
                                            dt_object = datetime.fromtimestamp(date_crawl_timestamp / 1000)
                                            date_crawl_display = dt_object.strftime("%d/%m/%Y")
                                        except Exception:
                                            date_crawl_display = "Kh√¥ng x√°c ƒë·ªãnh"


                                    # Ti√™u ƒë·ªÅ expander
                                    expander_title_text = f"**{i+1}. {job_title_display}**"

                                    # st.expander kh√¥ng d√πng unsafe_allow_html=True ·ªü ti√™u ƒë·ªÅ ch√≠nh
                                    with st.expander(expander_title_text, expanded=False):
                                        # Hi·ªÉn th·ªã Job Title L·ªöN V√Ä C√ì M√ÄU ngay ƒë·∫ßu n·ªôi dung expander
                                        st.markdown(f"<h3 class='job-title-content'>{job_title_display}</h3>", unsafe_allow_html=True)

                                        # Hi·ªÉn th·ªã ƒëi·ªÉm ph√π h·ª£p v·ªõi m√†u s·∫Øc
                                        st.markdown(f"<p class='score-line'><strong>ƒêi·ªÉm ph√π h·ª£p:</strong> <span class='similarity-score-display'>{similarity_score_display:.2f}</span></p>", unsafe_allow_html=True)

                                        # C√°c th√¥ng tin kh√°c, t·∫°o c·∫£m gi√°c "k·∫ª b·∫£ng" b·∫±ng CSS
                                        st.markdown(f"<p><strong>C√¥ng ty:</strong> {job.get('company_name', 'N/A')}</p>", unsafe_allow_html=True)
                                        st.markdown(f"<p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> {', '.join(job.get('province', ['N/A'])) if job.get('province') else 'N/A'}</p>", unsafe_allow_html=True)
                                        st.markdown(f"<p><strong>M·ª©c l∆∞∆°ng:</strong> {job.get('salary', 'Th∆∞∆°ng l∆∞·ª£ng')}</p>", unsafe_allow_html=True)
                                        st.markdown(f"<p><strong>Lo·∫°i c√¥ng vi·ªác:</strong> {job.get('job_type', 'N/A')}</p>", unsafe_allow_html=True)
                                        st.markdown(f"<p><strong>C·∫•p b·∫≠c h·ªçc v·∫•n:</strong> {job.get('academic_level', 'N/A')}</p>", unsafe_allow_html=True)
                                        st.markdown(f"<p><strong>Kinh nghi·ªám:</strong> {job.get('experience_years', 'Kh√¥ng y√™u c·∫ßu')}</p>", unsafe_allow_html=True)
                                        st.markdown(f"<p><strong>C·∫•p b·∫≠c:</strong> {job.get('level', 'N/A')}</p>", unsafe_allow_html=True)
                                        st.markdown(f"<p><strong>Ng√¥n ng·ªØ:</strong> {', '.join(job.get('language', ['N/A'])) if job.get('language') else 'N/A'}</p>", unsafe_allow_html=True)
                                        st.markdown(f"<p><strong>Tech Stack:</strong> {', '.join(job.get('tech', ['N/A'])) if job.get('tech') else 'N/A'}</p>", unsafe_allow_html=True)
                                        st.markdown(f"<p><strong>Vai tr√≤:</strong> {job.get('role', 'N/A')}</p>", unsafe_allow_html=True)
                                        st.markdown(f"<p><strong>T·ªïng s·ªë gi·ªù l√†m vi·ªác:</strong> {job.get('total_work_hour', 'N/A')}</p>", unsafe_allow_html=True)
                                        st.markdown(f"<p><strong>Th·ªùi gian l√†m vi·ªác trong tu·∫ßn:</strong> {job.get('time_range', 'N/A')}</p>", unsafe_allow_html=True)
                                        st.markdown(f"<p><strong>H·∫°n n·ªôp h·ªì s∆°:</strong> {deadline_display}</p>", unsafe_allow_html=True)
                                        st.markdown(f"<p><strong>S·ªë l∆∞·ª£ng tuy·ªÉn:</strong> {job.get('recruitment_count', 'N/A')}</p>", unsafe_allow_html=True)

                                        # Ph·∫ßn l·ª£i √≠ch (benefits)
                                        benefits = job.get('benefits', 'Kh√¥ng c√≥ th√¥ng tin.')
                                        if benefits and benefits != 'null': # Ki·ªÉm tra n·∫øu benefits kh√¥ng r·ªóng v√† kh√¥ng ph·∫£i 'null'
                                            st.markdown(f"**L·ª£i √≠ch:**")
                                            # Chia nh·ªè l·ª£i √≠ch th√†nh c√°c g·∫°ch ƒë·∫ßu d√≤ng n·∫øu c√≥ th·ªÉ
                                            benefits_list = [b.strip() for b in benefits.split('....') if b.strip()]
                                            if benefits_list:
                                                benefits_markdown = "".join([f"- {b}<br>" for b in benefits_list])
                                                st.markdown(f"<p>{benefits_markdown}</p>", unsafe_allow_html=True)
                                            else:
                                                st.markdown(f"<p>{benefits}</p>", unsafe_allow_html=True)
                                        else:
                                            st.markdown(f"<p><strong>L·ª£i √≠ch:</strong> Kh√¥ng c√≥ th√¥ng tin.</p>", unsafe_allow_html=True)


                                        # Ph·∫ßn m√¥ t·∫£ (description)
                                        description = job.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£ chi ti·∫øt.')
                                        st.markdown(f"**M√¥ t·∫£:**")
                                        st.markdown(f"<p>{description.replace('\\n', '<br>')}</p>", unsafe_allow_html=True) # Thay th·∫ø \n b·∫±ng <br> ƒë·ªÉ xu·ªëng d√≤ng

                                        st.markdown(f"---")
                                        st.markdown(f"[Xem chi ti·∫øt b√†i ƒëƒÉng]({job.get('url_job_posting', '#')})", unsafe_allow_html=True)
                                        st.markdown(f"[Xem h·ªì s∆° c√¥ng ty]({job.get('company_url', '#')})", unsafe_allow_html=True)

                    else:
                        st.error(f"‚ùå R·∫•t ti·∫øc, ƒë√£ c√≥ l·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß: {response.status_code} - {response.reason}. "
                                 "Ch√∫ng t√¥i ƒëang c·ªë g·∫Øng kh·∫Øc ph·ª•c s·ª± c·ªë n√†y. Mong b·∫°n th√¥ng c·∫£m v√† th·ª≠ l·∫°i sau √≠t ph√∫t nh√©.")
                        st.json(response.json())

                except requests.exceptions.Timeout:
                    st.error("‚è∞ Y√™u c·∫ßu API ƒë√£ h·∫øt th·ªùi gian. C√≥ v·∫ª m√°y ch·ªß ƒëang b·∫≠n ho·∫∑c m·∫°ng c·ªßa b·∫°n kh√¥ng ·ªïn ƒë·ªãnh. "
                             "Vui l√≤ng th·ª≠ l·∫°i sau v√†i gi√¢y nh√©.")
                except requests.exceptions.ConnectionError:
                    st.error("üîå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß API. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet c·ªßa b·∫°n ho·∫∑c URL API. "
                             "Ch√∫ng t√¥i xin l·ªói v√¨ s·ª± b·∫•t ti·ªán n√†y.")
                except Exception as e:
                    st.error(f"‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}. "
                             "R·∫•t xin l·ªói v√¨ s·ª± c·ªë n√†y. Nh√≥m ph√°t tri·ªÉn c·ªßa ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o v√† s·∫Ω xem x√©t s·ªõm nh·∫•t c√≥ th·ªÉ. "
                             "C·∫£m ∆°n s·ª± ki√™n nh·∫´n c·ªßa b·∫°n.")
        else:
            st.error("File t·∫£i l√™n kh√¥ng ph·∫£i l√† PDF h·ª£p l·ªá. Vui l√≤ng ch·ªçn m·ªôt file PDF nh√©.")
    else:
        st.warning("Vui l√≤ng t·∫£i l√™n m·ªôt file CV (PDF) tr∆∞·ªõc khi t√¨m ki·∫øm c√¥ng vi·ªác nh√©.")

st.markdown("---")
st.markdown("ƒê∆∞·ª£c ph√°t tri·ªÉn b·ªüi Ung Ho√†ng Long")